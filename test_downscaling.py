{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ef79b00-bbeb-43f1-b054-bc0b8c1e05c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#!/usr/bin/env python\n",
    "\n",
    "## MSC_Thesis \n",
    "## Jacotte Monroe \n",
    "## 19/03/24\n",
    "\n",
    "## CHANGE DESCRIPTION BECAUSE THIS WAS COPY PASTED!!!\n",
    "## Script that reads the spatial and temporal extents and retrieves the matching MODIS 250m images. \n",
    "## MODIS dataset is cloudmasked using a bitmask from MODIS 500m, then gap filled using temporal linear interpolation. \n",
    "## Each image is reprojected to EPSG 32733 (Namibia projection) and clipped to study area. \n",
    "## NDVI is calculated. \n",
    "## Script inputs: \n",
    "##       0_single_run_settings.csv\n",
    "##       2_a1_step_extents.csv\n",
    "## Script outputs: \n",
    "##       3_a1_modis_images (folder) > [daily_MODIS_NDVI_250m_date].tif (intermediate output) & 3_a2_modis_ndvi.tif (intermediate output)\n",
    "\n",
    " \n",
    "\n",
    "###########\n",
    "## Script set-up and loading necessary libraries \n",
    "###########\n",
    "\n",
    "import ee\n",
    "ee.Authenticate()\n",
    "\n",
    "import geemap\n",
    "import os\n",
    "import pandas as pd\n",
    "import math \n",
    "\n",
    "ee.Initialize()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# function that takes image and replaces masked pixels with linearly interpolated values from bef/aft images\n",
    "def interpolateImage(image):\n",
    "    image = ee.Image(image)\n",
    "\n",
    "    # get list of before/after images from image property\n",
    "    beforeImages = ee.List(image.get('before'))\n",
    "    afterImages = ee.List(image.get('after'))\n",
    "\n",
    "    # create image collection of before/after images\n",
    "    # mosaic() combines images into one image accordint to their position in collection \n",
    "    #  image first has all pixels from last image in collection \n",
    "    #  gaps filled with second to last image from collection ...\n",
    "    beforeMosaic = ee.ImageCollection.fromImages(beforeImages).mosaic()\n",
    "    afterMosaic = ee.ImageCollection.fromImages(afterImages).mosaic()\n",
    "\n",
    "    # rename time band of images \n",
    "    time_bef = beforeMosaic.select('timestamp').rename('time_bef')\n",
    "    time_aft = afterMosaic.select('timestamp').rename('time_aft')\n",
    "    time0 = image.metadata('system:time_start').rename('time0')\n",
    "\n",
    "    # combine all three single band time images into one image with three time bands \n",
    "    timeImage = ee.Image.cat([time_bef, time_aft, time0])\n",
    "\n",
    "    # compute image of interpolated surface reflectance values \n",
    "    timeRatio = timeImage.expression('(time0 - time_bef) / (time_aft - time_bef)', \\\n",
    "                    {'time0': timeImage.select('time0'), \n",
    "                     'time_bef': timeImage.select('time_bef'), \n",
    "                     'time_aft': timeImage.select('time_aft')})\n",
    "\n",
    "    interpolated = beforeMosaic.add((afterMosaic.subtract(beforeMosaic).multiply(timeRatio)))\n",
    "\n",
    "    # replace masked pixels in current image with pixels from interpolated mosaic\n",
    "    result = image.unmask(interpolated)\n",
    "\n",
    "    # return gap-filled image\n",
    "    return result.copyProperties(image, ['system:time_start'])\n",
    "\n",
    "# define landsat scaling factor\n",
    "def applyScaleFactors(image): \n",
    "    opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2)\n",
    "    return image.addBands(opticalBands, None, True)\n",
    "\n",
    "# function to reproject (32733 if want Namibia coordinates, but elephant fixes are in 4326)\n",
    "def reprojectLandsat(image): \n",
    "    return image.reproject('EPSG:32733', None, 30)\n",
    "\n",
    "def reprojectModis(image):\n",
    "    return image.reproject('EPSG:32733', None, 250)\n",
    "\n",
    "# function to clip image to study area\n",
    "# have to include nested function because can't use map() with more than one argument \n",
    "# source: https://gis.stackexchange.com/questions/473500/mapping-function-with-multiple-arguments-in-google-earth-engine\n",
    "def clipToAOI(bbox): \n",
    "    def withBbox(image):\n",
    "        return image.clip(bbox).copyProperties(image, ['system:id'])\n",
    "    return withBbox\n",
    "\n",
    "# function to calculate NDVI \n",
    "def addNDVI(image): \n",
    "    ndvi = image.normalizedDifference(['nir', 'red']).rename('NDVI')\n",
    "    return image.addBands(ndvi)\n",
    "\n",
    "\n",
    "\n",
    "def retrieveImagesForDownscaling(): \n",
    "    ###########\n",
    "    ## Read run settings \n",
    "    ###########\n",
    "    run_settings_table = pd.read_csv('data/single_run_settings.csv', index_col = 0, header = None)\n",
    "\n",
    "    # define settings\n",
    "    ID = run_settings_table.iloc[0,0]\n",
    "    week = str(run_settings_table.iloc[0,1])\n",
    "    random_data_method = run_settings_table.iloc[0,2]\n",
    "\n",
    "    # check that the week setting doesn't preceed Landsat 8 data --> week >= 2259\n",
    "    # Landsat starts 2013-03-18 meaning that week cannot be before 2013-04-18 (because 1 month buffer, see code below)\n",
    "    # source: https://developers.google.com/earth-engine/datasets/catalog/LANDSAT_LC08_C02_T1_L2\n",
    "    # if the week is before 2013-04-18, skip the iteration and go to next run \n",
    "    # source: https://www.tutorialspoint.com/python/python_loop_control.htm\n",
    "    if week < 2259: \n",
    "        continue\n",
    "    \n",
    "    \n",
    "    \n",
    "    ###########\n",
    "    ## Load step extents LUT\n",
    "    ###########\n",
    "    extents_lut = pd.read_csv('data/' + ID + '/' + week + '/' + '2_a1_step_extents_LUT_' + random_data_method + '.csv')\n",
    "    \n",
    "    \n",
    "    \n",
    "    ###########\n",
    "    ## Create region (largest extent) geometry and define first and last dates\n",
    "    ###########\n",
    "    large_extent = extents_lut.iloc[-1]\n",
    "    \n",
    "    large_extent_coords = [[[large_extent.loc['xmin'], large_extent.loc['ymin']],\n",
    "                            [large_extent.loc['xmin'], large_extent.loc['ymax']],\n",
    "                            [large_extent.loc['xmax'], large_extent.loc['ymax']],\n",
    "                            [large_extent.loc['xmax'], large_extent.loc['ymin']]]]\n",
    "    \n",
    "    large_region = ee.Geometry.Polygon(large_extent_coords, proj = 'EPSG:32733', evenOdd = False)\n",
    "    \n",
    "    first_date = ee.Date(large_extent.loc['start_date_prev_week'], 'Africa/Maputo')\n",
    "    week_start_date = ee.Date(large_extent.loc['start_date'], 'Africa/Maputo')\n",
    "    last_date = ee.Date(large_extent.loc['end_date'], 'Africa/Maputo')\n",
    "    \n",
    "    # define landsat buffer (days) to make sure there are enough Landsat images being included (extra large to be safe)\n",
    "    l8_buffer = ee.Number(30)\n",
    "    \n",
    "    \n",
    "    \n",
    "    ###########\n",
    "    ## Load feature of Etosha National Park (Namibia) and transform into geometry\n",
    "    ###########\n",
    "    # load Etosha National Park study area\n",
    "    enp = ee.FeatureCollection('WCMC/WDPA/current/polygons') \\\n",
    "            .filter(ee.Filter.eq('ORIG_NAME', 'Etosha'))\n",
    "    \n",
    "    # turn ENP study area into a geometry\n",
    "    enp_geom = enp.geometry()\n",
    "    \n",
    "\n",
    "\n",
    "    ###########\n",
    "    ## Set interpolation parameters \n",
    "    ###########\n",
    "    # set time-window for interpolation (how far will interpolate)\n",
    "    # note: this function only used for downscaling, data has already been handpicked for downscaling purposely to avoid cloudcover\n",
    "    #       so there aren't many consecutive days without data --> time window can be kept relatively small \n",
    "    # source: https://spatialthoughts.com/2021/11/08/temporal-interpolation-gee/\n",
    "    days = ee.Number(3) \n",
    "    \n",
    "    # convert to milliseconds (for gap filling step)\n",
    "    millis = days.multiply(1000*60*60*24)\n",
    "\n",
    "    \n",
    "    \n",
    "    ###########\n",
    "    ## Define path of output directory \n",
    "    ###########\n",
    "    # define output folder paths for current MODIS images and images from week prior\n",
    "    out_dir_m = 'data/' + ID + '/' + week + '/' + '3_b1_modis_images_downscaling_' + random_data_method + '/'\n",
    "    out_dir_l = 'data/' + ID + '/' + week + '/' + '3_b2_landsat_images_downscaling_' + random_data_method + '/'\n",
    "    \n",
    "    \n",
    "    \n",
    "    ###########\n",
    "    ## Retrieve MODIS and Landsat datasets\n",
    "    ###########\n",
    "    # load daily MODIS 250m dataset \n",
    "    # source: https://developers.google.com/earth-engine/datasets/catalog/MODIS_061_MOD09GQ\n",
    "    modis = ee.ImageCollection('MODIS/061/MOD09GQ') \\\n",
    "            .filterDate(first_date.advance(days.multiply(-1), 'day'), last_date.advance(days, 'day')) \\\n",
    "            .filterBounds(enp_geom) \\\n",
    "            .select(['sur_refl_b01', 'sur_refl_b02'], ['red', 'nir'])\n",
    "    \n",
    "    # load Landsat 8 level 2 \n",
    "    # source: https://developers.google.com/earth-engine/datasets/catalog/LANDSAT_LC08_C02_T1_L2\n",
    "    # source: https://developers.google.com/earth-engine/apidocs/ee-date-advance#colab-python\n",
    "    # note: can't filter bounds with large_region until have reprojected image collections (meantime use enp_geom)\n",
    "    l8 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2') \\\n",
    "            .filterDate(first_date.advance(l8_buffer.multiply(-1), 'day'), last_date.advance(l8_buffer, 'day')) \\\n",
    "            .filterBounds(enp_geom) \n",
    "    \n",
    "    \n",
    "    \n",
    "    ###########\n",
    "    ## Image gap filling - Linear interpolation of missing pixels \n",
    "    ###########\n",
    "    # interpolation of MODIS values necessary because the MODIS image is missing data on days of Landsat coverage (fill with bef/aft days)\n",
    "    # add timestamp band to each image \n",
    "    modis_withTime = modis.map(addTimestamp)\n",
    "    \n",
    "    # following tutorial: https://spatialthoughts.com/2021/11/08/temporal-interpolation-gee/\n",
    "    # define filter to only retrieve images within the specified time-window\n",
    "    maxDiffFilter = ee.Filter.maxDifference(difference = millis, \n",
    "                                            leftField = 'system:time_start', \n",
    "                                            rightField = 'system:time_start')\n",
    "    \n",
    "    # define filters that compare given image timestamp against other image timestamps\n",
    "    # NOTE: leftField compared against rightField --> so in first filter = leftField smaller than rightField\n",
    "    greaterEqFilter = ee.Filter.greaterThanOrEquals(leftField = 'system:time_start', \n",
    "                                                    rightField = 'system:time_start')\n",
    "    \n",
    "    lessEqFilter = ee.Filter.lessThanOrEquals(leftField = 'system:time_start', \n",
    "                                              rightField = 'system:time_start')\n",
    "    \n",
    "    # combined filters --> find all images before/after image that are within time-window\n",
    "    filter_before = ee.Filter.And(maxDiffFilter, greaterEqFilter)\n",
    "    filter_after = ee.Filter.And(maxDiffFilter, lessEqFilter)\n",
    "    \n",
    "    # set join parameters\n",
    "    # pairs each image to group of matching elements from the second collection \n",
    "    # saves the matching elements as new property with matchesKey name, ordered by date\n",
    "    # order set to have the closest image as last element in list\n",
    "    # source: https://spatialthoughts.com/2021/11/08/temporal-interpolation-gee/\n",
    "    # source: https://developers.google.com/earth-engine/apidocs/ee-join-saveall\n",
    "    join_before = ee.Join.saveAll(\n",
    "        matchesKey = 'before', \n",
    "        ordering = 'system:time_start', \n",
    "        ascending = True)\n",
    "    \n",
    "    join_after = ee.Join.saveAll(\n",
    "        matchesKey = 'after', \n",
    "        ordering = 'system:time_start', \n",
    "        ascending = False)\n",
    "    \n",
    "    # join the cloudfree MODIS 250m collection with itself to get all previous/post images within time-window\n",
    "    # results in image collection where each image has a property that lists all images preceeding/following image within time-window\n",
    "    # source: https://spatialthoughts.com/2021/11/08/temporal-interpolation-gee/\n",
    "    modis_joined_temp = join_before.apply(\n",
    "        primary = modis_withTime, \n",
    "        secondary = modis_withTime, \n",
    "        condition = filter_before)\n",
    "    \n",
    "    modis_joined = join_after.apply(\n",
    "        primary = modis_joined_temp, \n",
    "        secondary = modis_joined_temp, \n",
    "        condition = filter_after)\n",
    "    \n",
    "    # interpolate all images from MODIS 250m image collection\n",
    "    modis_interpolated = ee.ImageCollection(modis_joined.map(interpolateImage))\n",
    "\n",
    "\n",
    "    \n",
    "    ###########\n",
    "    ## Preprocess images\n",
    "    ###########\n",
    "    # apply scaling factor on surface reflectance bands of Landsat to get reflectance values instead of digital numbers\n",
    "    # source: https://www.usgs.gov/faqs/how-do-i-use-a-scale-factor-landsat-level-2-science-products\n",
    "    l8_scaled = l8.map(applyScaleFactors).select(['SR_B.'])\n",
    "    \n",
    "    # reproject MODIS and Landsat datasets to Namibia projection \n",
    "    modis_interpolated = modis_interpolated.filterDate(first_date, last_date)\n",
    "    modis_reproj = modis_interpolated.map(reprojectModis)\n",
    "    l8_reproj = l8_scaled.map(reprojectLandsat)\n",
    "    \n",
    "    # clip image\n",
    "    modis_clipped = modis_reproj.map(clipToAOI(large_region))\n",
    "    l8_clipped = l8_reproj.map(clipToAOI(large_region))\n",
    "    \n",
    "    # add NDVI as a band to the MODIS dataset\n",
    "    modis_ndvi = modis_clipped.map(addNDVI)\n",
    "    \n",
    "    \n",
    "    \n",
    "    ###########\n",
    "    ## Export MODIS and Landsat images \n",
    "    ###########\n",
    "    # export MODIS image collection to local repository \n",
    "    # source: https://github.com/gee-community/geemap/blob/master/examples/notebooks/11_export_image.ipynb\n",
    "    geemap.ee_export_image_collection(modis_ndvi, out_dir = out_dir_m, region = large_region)\n",
    "    \n",
    "    # export Landsat 8 image collection to local repository \n",
    "    geemap.ee_export_image_collection(l8_clipped, out_dir = out_dir_l, region = large_region)\n",
    "    \n",
    "    \n",
    "    \n",
    "    ###########\n",
    "    ## Create and export mean MODIS NDVI image for large extent \n",
    "    ###########\n",
    "    # This image will be used as basemap for visualization (no analysis done with it)\n",
    "    # filter dataset to dates of week (remove week prior to movement)\n",
    "    modis_week_ndvi = modis_ndvi.filterDate(week_start_date, last_date).select(['NDVI'])\n",
    "    \n",
    "    # create mean NDVI raster\n",
    "    # source: https://developers.google.com/earth-engine/guides/ic_reducing\n",
    "    modis_ndvi_mean = modis_week_ndvi.mean()\n",
    "    \n",
    "    # export image\n",
    "    geemap.ee_export_image(modis_ndvi_mean, filename = os.path.join(out_dir_m, \"mean_ndvi.tif\"), region = large_region, scale = 250)\n",
    "    \n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "# read the table with all run settings\n",
    "all_runs = pd.read_csv('data/run_settings_temp.csv', index_col = 0)\n",
    "\n",
    "# iteratte over each entry in the table \n",
    "for i in range(len(all_runs)):\n",
    "    # save the run settings to be read in the function\n",
    "    row = all_runs.iloc[[i]]\n",
    "    row.to_csv('data/single_run_settings.csv', header = False)\n",
    "\n",
    "    # run function for MODIS image retrieval\n",
    "    retrieveImagesForDownscaling()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
